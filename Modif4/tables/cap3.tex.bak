%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Chapter 3: Procedimiento experimental
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\leftline{\Large{\bf Introducción:}}
En éste capítulo, se describirán los diversos materiales utilizados en la elaboración y ralización del algoritmo diseñados en el software Python. Además, se implementará el algoritmo de la distribución geométrica, para observar los procesos en cada paso de ejecución del programa. Finalmente, se expondrán los resultados finales y las conclusiones que de ellos se desprendan.


%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\section{Descripción de los experimentos}
\label{3:sec:1}

%ver el ejmplo del triángulo.

%diagrama de flujo (Buscar el diagrama en latex)
\begin{enumerate}
	 \item \textbf{Distribución Geometrica. }
\begin{description}
  \item[Análisis:] Vease el capítulo 2.
  \item[Formulación] Introducción de parámetros: Probabilidad $p$ y número de casos $n$
  \item[Algoritmo: (ver Figura \ref{dflu}).]
\begin{figure}[h!]
  \centering
  % Requires \usepackage{graphicx}
  \includegraphics[width=5cm]{images/diafluj.png}
  \caption{Diagrama de Flujo de la Distribución Geométrica}\label{dflu}
\end{figure}	
  \item[Codifición] Vease el código en  en el apéndice 1.
\end{description}
\end{enumerate}



%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\section{Descripción del material}
\label{3:sec:2}
Tanto para la ejecución en Python, como para la implementación en \LaTeX{}, hemos utilizado:

\begin{enumerate}
	 \item \textbf{Ordenadores:}
%------------------------------------------------------------------------------
\input{tables/ord.tex}
%------------------------------------------------------------------------------


  \item \textbf{Versión de Python:}
  Para la realización del programa que soluciona los distintos problemas, anteriormente descritos, utilizaremos la siguiente versión de Python:
  \begin{center}
  \textbf{PYTHON 2.7.3 [GCC 4.6.3] ON LINUX2}
  \end{center}

  \item \textbf{Versiones de \LaTeX{}}
  Así mismo hemos utilizado las siguientes versiones de \LaTeX{} y distintos entornos de trabajo:\footnote{Ambos entornos, trabajan en el sistema operativo Windos (en sus distintas versiones, dadas en el cuadro \ref{marca:2})}
%------------------------------------------------------------------------------
\input{tables/latex.tex}
%------------------------------------------------------------------------------



\end{enumerate}


%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\newpage
\section{Resultados obtenidos:}
\label{3:sec:3}

Para la realización de la siguiente tabla \ref{tab:1}, nos hemos ayudado de los problemas resueltos en el capítulo 1. Se ha añadido el cálculo del error entre los resultados obtenidos, por el programa diseñado en Python, en comparación con los resultados obtenidos : ''a mano'' y con una calculadora online \cite{URL:XML}

%------------------------------------------------------------------------------
\input{tables/table.tex}
%------------------------------------------------------------------------------

%parrafo del tiempo

Vamos a comprobar la eficacia (en tiempo de ejecución) de nuestro programa Python, para cada unos de sus casos individualmente, es decir, para los casos:
\begin{enumerate}
 \item Caso $P(X=n)$
 \item Caso $P(X\leq n)$
 \item Caso $P(X<n)$
 \item Caso $P(X\geq n)$
\end{enumerate}
Los resultados se recogen en la siguiente tabla:
%------------------------------------------------------------------------------
\input{tables/time.tex}
%------------------------------------------------------------------------------
% parrafo de la grafica
A continuación se muestra los datos obtenidos (tiempo de compilación), los cuales varían atendiendo a los diferentes valoras de n. \footnote{Para simplificar el trabajo todas las funciones tendrán los mismos valores de p ($p=0.3$)}

%------------------------------------------------------------------------------
\begin{figure}[!th]
\begin{center}
\includegraphics[width=0.7\textwidth]{images/figura1.png}
\caption{Ejemplo de figura}
\label{fig:1}
\end{center}
\end{figure}
%------------------------------------------------------------------------------




%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\section{Análisis de los resultados}
\label{3:sec:4}

Como se puede observar en la tabla \ref{tabla:1} los errores que se producen entre la función implementada en Python y la calculadora de precisión, o las operaciones ''echas a mano'', es mínima. Esta observación nos induce a afirmar que esta función tiene un grado de exactitud muy alto, y por consiguiente podríamos utilizarla en cualquier problema con el mismo esquema que los estudiados en este estudio.

Además,  (se analizará después de haber creado toda la gráfica y se estudiará en su conjunto).